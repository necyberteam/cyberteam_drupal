name: 'DDEV Cypress Test'
description: 'Run Cypress tests using DDEV instead of Lando'
author: 'necyberteam'

inputs:
  site:
    description: 'Site identifier (e.g. accessmatch, ccmnet)'
    required: true
  directory:
    description: 'Test directory name'
    required: true
  database:
    description: 'Custom database URL (optional)'
    required: false
  github_token:
    description: 'GitHub token for authentication'
    required: true
  amp_uid:
    description: 'AMP UID for user authentication'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Setup DDEV
      shell: bash
      run: |
        echo 'docker compose --compatibility "$@"' > /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        echo ">>> Installing DDEV..."
        curl -fsSL https://apt.fury.io/drud/gpg.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/ddev.gpg > /dev/null
        echo "deb [signed-by=/etc/apt/trusted.gpg.d/ddev.gpg] https://apt.fury.io/drud/ * *" | sudo tee /etc/apt/sources.list.d/ddev.list
        sudo apt-get update && sudo apt-get install -y ddev
        ddev config global --instrumentation-opt-in=false
        ddev --version
        mkcert -install

    - name: Validate composer files
      shell: bash
      run: composer validate --no-check-all

    - name: Configure and start DDEV
      shell: bash
      run: |
        ddev config --project-type=drupal10 --docroot=web --database=mysql:8.0 --php-version=8.2
        ddev start

    - name: Setup GitHub authentication for DDEV
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        echo "$GITHUB_TOKEN" | ddev exec gh auth login --with-token
        ddev exec composer config -g github-oauth.github.com $GITHUB_TOKEN

    - name: Install dependencies in DDEV
      shell: bash
      run: ddev composer install --optimize-autoloader

    - name: Download database
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        DATABASE: ${{ inputs.database }}
      run: |
        mkdir -p backups
        if [ -n "$DATABASE" ]; then
          echo "Downloading custom database: $DATABASE"
          wget -O backups/site.sql.gz "$DATABASE"
        else
          echo "Using GitHub artifact database"
          gh auth status
          ddev exec vendor/bin/robo gh:pulldb
        fi

    - name: Download files if needed
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        if [ ! -d "web/sites/default/files" ]; then
          gh auth status
          ddev exec vendor/bin/robo gh:pullfiles
        fi

    - name: Import database and deploy
      shell: bash
      env:
        AMP_UID: ${{ inputs.amp_uid }}
      run: |
        # Use DDEV's fast database import
        ddev import-db --src=backups/site.sql.gz
        # Run post-import setup (equivalent to robo did without db import)
        ddev drush deploy -y
        ddev drush cim -y
        ddev drush cr

    - name: Clear watchdog logs
      shell: bash
      run: ddev drush watchdog:delete all -y

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: tests/cypress/package-lock.json

    - name: Install Cypress dependencies
      shell: bash
      run: |
        cd tests/cypress
        npm ci

    - name: Install Cypress system dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libxtst6 xauth xvfb
        # Install Chrome for Cypress
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Verify site accessibility
      shell: bash
      env:
        SITE: ${{ inputs.site }}
        TERM: xterm
      run: |
        echo "Checking DDEV status..."
        ddev status
        echo "Testing site accessibility at https://$SITE-local.ddev.site"
        curl -I "https://$SITE-local.ddev.site" || echo "Site not accessible"
        echo "DDEV describe output:"
        ddev describe

    - name: Run Cypress tests
      shell: bash
      env:
        SITE: ${{ inputs.site }}
        DIR: ${{ inputs.directory }}
        TERM: xterm
      run: |
        cd tests/cypress
        echo "Testing site URL: https://$SITE-local.ddev.site"
        echo "Running tests from: cypress/e2e/$DIR/**/*.js"
        xvfb-run -a npx cypress run --config baseUrl=https://$SITE-local.ddev.site --spec "cypress/e2e/$DIR/**/*.js"

    - name: Upload screenshots on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: cypress-screenshots-${{ inputs.site }}-${{ inputs.directory }}
        path: tests/cypress/cypress/screenshots/
        if-no-files-found: ignore

    - name: Get Drupal logs on failure
      if: failure()
      shell: bash
      run: |
        echo "Attempting to get Drupal logs..."
        ddev drush wd-show --count=10000 || echo "Could not retrieve Drupal logs (Drupal may not be fully set up)"

    - name: Cleanup DDEV
      if: always()
      shell: bash
      run: ddev delete -O -y

branding:
  icon: 'check-circle'
  color: 'green'