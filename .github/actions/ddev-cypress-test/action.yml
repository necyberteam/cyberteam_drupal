name: 'DDEV Cypress Test'
description: 'Run Cypress tests using DDEV'
author: 'necyberteam'

inputs:
  site:
    description: 'Site identifier (e.g. accessmatch, ccmnet)'
    required: true
  directory:
    description: 'Test directory name'
    required: true
  database:
    description: 'Custom database URL (optional)'
    required: false
  database_branch:
    description: 'Branch to download database artifact from'
    required: false
    default: 'main'
  github_token:
    description: 'GitHub token for authentication'
    required: true
  amp_uid:
    description: 'AMP UID for user authentication'
    required: true
  slack_webhook:
    description: 'Slack webhook URL for notifications (optional)'
    required: false
  slack_bot_token:
    description: 'Slack bot token for file uploads (optional)'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Download database backup
      if: inputs.database == ''
      uses: dawidd6/action-download-artifact@v6
      with:
        name: amp-daily-backup
        path: backups/
        workflow: backupdb.yml
        branch: ${{ inputs.database_branch }}

    - name: Setup DDEV Base
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
      uses: ./.github/actions/ddev-base
      with:
        site: ${{ inputs.site }}
        database: ${{ inputs.database }}
        github_token: ${{ inputs.github_token }}
        amp_uid: ${{ inputs.amp_uid }}

    - name: Download files
      shell: bash
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        echo "Downloading fresh files from backup..."
        ddev exec gh auth status
        ddev exec vendor/bin/robo gh:pullfiles

    - name: Setup Node.js
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: tests/cypress/package-lock.json

    - name: Install Cypress dependencies
      shell: bash
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
      run: |
        cd tests/cypress
        npm ci

    - name: Install Cypress system dependencies
      shell: bash
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libxtst6 xauth xvfb
        # Install Chrome for Cypress
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Verify site accessibility
      shell: bash
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
      env:
        SITE: ${{ inputs.site }}
        TERM: xterm
      run: |
        echo "Checking DDEV status..."
        ddev status
        echo "Testing site accessibility at https://$SITE.ddev.site"
        curl -I "https://$SITE.ddev.site" || echo "Site not accessible"
        echo "DDEV describe output:"
        ddev describe

    - name: Run Cypress tests
      shell: bash
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
      env:
        SITE: ${{ inputs.site }}
        DIR: ${{ inputs.directory }}
        TERM: xterm
      run: |
        cd tests/cypress
        echo "Testing site URL: https://$SITE.ddev.site"
        echo "Running tests from: cypress/e2e/$DIR/**/*.js"
        # Run Cypress tests (let it fail naturally to trigger failure handlers)
        xvfb-run -a npx cypress run --config baseUrl=https://$SITE.ddev.site --spec "cypress/e2e/$DIR/**/*.js"

    - name: Check for screenshots
      shell: bash
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
      run: |
        echo "Checking for Cypress screenshots..."
        if [ -d "tests/cypress/cypress/screenshots" ]; then
          echo "Screenshots found:"
          ls -la tests/cypress/cypress/screenshots/
        else
          echo "No screenshots directory found"
        fi

    - name: Upload A11y reports
      if: ${{ hashFiles('tests/cypress/cypress-a11y-reports/*.json') != '' && (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch') }}
      uses: actions/upload-artifact@v4
      with:
        name: cypress-a11y-report-${{ inputs.site }}-${{ inputs.directory }}
        path: tests/cypress/cypress-a11y-reports
        if-no-files-found: ignore

    - name: Upload screenshots on failure
      if: ${{ failure() && !cancelled() && hashFiles('tests/cypress/cypress/screenshots/**/*.png') != '' && (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch') }}
      uses: actions/upload-artifact@v4
      with:
        name: cypress-screenshots-${{ inputs.site }}-${{ inputs.directory }}
        path: tests/cypress/cypress/screenshots/
        if-no-files-found: ignore

    - name: Upload screenshots to Slack
      shell: bash
      if: ${{ failure() && inputs.slack_bot_token != '' && !cancelled() && hashFiles('tests/cypress/cypress/screenshots/**/*.png') != '' && (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch') }}
      env:
        SLACK_BOT_TOKEN: ${{ inputs.slack_bot_token }}
      run: |
        if [ -d "tests/cypress/cypress/screenshots" ]; then
          echo "Uploading screenshots to Slack..."
          cd tests/cypress/cypress/screenshots

          # Find and upload first few screenshot files (limit to avoid spam)
          count=0
          find . -name "*.png" -type f | head -3 | while read screenshot; do
            if [ -f "$screenshot" ]; then
              echo "Uploading $screenshot to Slack..."
              response=$(curl -s -F file=@"$screenshot" \
                   -F "initial_comment=Cypress test failure: ${{ inputs.site }}-${{ inputs.directory }} - $(basename "$screenshot")" \
                   -F channels=#cypress-git-notifications \
                   -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                   https://slack.com/api/files.upload)
              echo "Slack API response: $response"
            fi
          done
        fi

    - name: Notify Slack on failure
      if: ${{ failure() && inputs.slack_bot_token != '' && !cancelled() && hashFiles('tests/cypress/cypress/screenshots/**/*.png') != '' && (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch') }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ inputs.slack_webhook }}
        SLACK_MESSAGE: 'Cypress tests failed for ${{ inputs.site }}-${{ inputs.directory }}. Screenshots also uploaded above.'
        SLACK_TITLE: "Cypress Test Failure"
        SLACK_CHANNEL: cypress-git-notifications

    - name: Notify Slack on failure (no screenshots)
      if: ${{ failure() && inputs.slack_webhook != '' && !cancelled() && hashFiles('tests/cypress/cypress/screenshots/**/*.png') == '' && (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch') }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ inputs.slack_webhook }}
        SLACK_MESSAGE: 'Cypress tests failed for ${{ inputs.site }}-${{ inputs.directory }}. No screenshots were generated.'
        SLACK_TITLE: "Cypress Test Failure"
        SLACK_CHANNEL: cypress-git-notifications

    - name: Slack - give link back to action if A11y reports exist
      if: ${{ hashFiles('tests/cypress/cypress-a11y-reports/*.json') != '' && (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch') }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ inputs.slack_webhook }}
        SLACK_MESSAGE: 'Cypress A11y reports are available as an artifact in the GitHub Action run. View at: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        SLACK_TITLE: "Cypress A11y Reports Available"
        SLACK_CHANNEL: cypress-git-notifications

    - name: Get Drupal logs on failure
      shell: bash
      if: ${{ failure() && !cancelled() && (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch') }}
      run: |
        echo "Attempting to get Drupal logs..."
        ddev drush wd-show --count=10000 || echo "Could not retrieve Drupal logs (Drupal may not be fully set up)"

    - name: Cleanup DDEV
      shell: bash
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
      run: ddev delete -O -y

    - name: Merge Group
      shell: bash
      if: ${{ github.event_name == 'merge_group' }}
      run: |
        echo 'Let Merge Queue pass'

branding:
  icon: 'check-circle'
  color: 'green'
