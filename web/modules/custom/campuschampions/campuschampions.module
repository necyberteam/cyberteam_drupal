<?php

/**
 * @file
 */

use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\node\NodeInterface;
use Drupal\Core\Access\AccessResult;

/**
 *
 */
function campuschampions_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if ($form_id == 'webform_submission_join_campus_champions_add_form') {
    // Prepopulate user fields if logged into an account.
    $user = \Drupal::currentUser();
    if ($user->isAuthenticated()) {
      $account = User::load($user->id());
      $form['elements']['username']['#default_value'] = $account->name->value;
      $form['elements']['user_first_name']['#default_value'] = $account->field_user_first_name->value;
      $form['elements']['user_last_name']['#default_value'] = $account->field_user_last_name->value;
      $form['elements']['user_email']['#default_value'] = $account->mail->value;
      $form['elements']['username']['#attributes'] = ['readonly' => 'readonly'];
      $form['elements']['user_first_name']['#attributes'] = ['readonly' => 'readonly'];
      $form['elements']['user_last_name']['#attributes'] = ['readonly' => 'readonly'];
      $form['elements']['user_email']['#attributes'] = ['readonly' => 'readonly'];
    }

    $form['elements']['carnegie_classification']['#autocomplete_route_name'] = 'campuschampions.autocomplete';

    // Reorder form.
    $cc_checkbox = $form['elements']['i_can_t_find_my_carnegie_code'];
    $user_institution = $form['elements']['user_institution'];
    unset($form['elements']['i_can_t_find_my_carnegie_code']);
    unset($form['elements']['user_institution']);
    $form['elements']['i_can_t_find_my_carnegie_code'] = $cc_checkbox;
    $form['elements']['user_institution'] = $user_institution;

    if ($form['#validate'] != 'validate_form') {
      $form['#validate'][] = 'validate_form';
    }
  }

  if ($form_id == 'webform_submission_distributed_experts_network_help_add_form') {
    $form['elements']['institution']['#autocomplete_route_name'] = 'campuschampions.autocomplete';
  }

  if ($form_id == 'user_form') {
    // ksm($form);
    $form['role_change']['widget']['#options']['student'] = 'student-facilitator <i class="fa fa-info-circle" aria-hidden="true" data-toggle="tooltip" title="Student Facilitator"></i>';
    $form['role_change']['widget']['#options']['mentor'] = 'mentor <i class="fa fa-info-circle" aria-hidden="true" data-toggle="tooltip" title="Mentor"></i>';
    $form['role_change']['widget']['#options']['professional_mentor'] = 'regional-facilitator <i class="fa fa-info-circle" aria-hidden="true" data-toggle="tooltip" title="Regional Facilitator"></i>';

    // Hide is_campus_champion field unless you are an admin.
    $roles = \Drupal::currentUser()->getRoles();
    if (!in_array("administrator", $roles)) {
      $form['field_is_cc']['widget']['#access'] = FALSE;
    }

    // Don't allow people to join Campus Champions field unless the is_cc field is checked.
    if ($form['#validate'] != 'validate_user_form') {
      $form['#validate'][] = 'validate_user_form';
    }
  }

  // Don't allow people to register as Campus Champions.
  if ($form_id == 'user_register_form') {
    $form['field_is_cc']['widget']['#access'] = FALSE;
    $options = $form['field_region']['widget']['#options'];
    $form['field_region']['widget']['#options'] = array_filter($options, function ($option) {
      if ($option == 'Campus Champions') {
        return FALSE;
      }
      return TRUE;
    });
  }

  if ($form_id == 'change_pwd_form') {
    $form['actions']['submit']['#submit'][] = 'campuschampions_redirect_to_profile_page_form_submit';
  }

  // Hide Preview button on contact forms.
  $start = 'contact_message';
  if (@substr_compare($form_id, $start, 0, strlen($start)) == 0) {
    $form['actions']['preview']['#access'] = FALSE;
  }
}

if (!function_exists('validate_form')) {

  /**
   *
   */
  function validate_form(array &$form, FormStateInterface $form_state) {
    $user_email = $form_state->getValue('user_email');
    $username = $form_state->getValue('username');

    if (!\Drupal::currentUser()->isAuthenticated()) {
      $ids = \Drupal::entityQuery('user')->condition('mail', $user_email)->execute();

      if (!empty($ids)) {
        $form_state->setErrorByName('user_email', t('There is an account associated with this email address. Please <a href="/user/login">login</a> first.'));
      }

      $uids = \Drupal::entityQuery('user')->condition('name', $username)->execute();

      if (!empty($uids)) {
        $form_state->setErrorByName('username', t('There is an account associated with this username. Please <a href="/user/login">login</a> first.'));
      }
    }
  }

}

/**
 * Implements validate_user_form().
 *
 * Require is_cc field to assign Campus Champions Program.
 */
if (!function_exists('validate_user_form')) {

  /**
   *
   */
  function validate_user_form(array &$form, FormStateInterface $form_state) {
    $programs = $form_state->getValue('field_region');
    $is_cc = $form_state->getValue('field_is_cc');
    // 572 is Campus Champions
    if (array_filter($programs, function ($program) {
      return $program['target_id'] == '572';
    }) && !$is_cc['value']) {
      $form_state->setErrorByName('field_region', t('Please join the Campus Champions by submitting <a href="/form/join-campus-champions">this form</a> before selecting "Campus Champions" in the Programs list.'));
    }
  }

}

/**
 * Implements hook_theme().
 */
function campuschampions_theme() {
  return [
    'campuschampions_block' => [
      'variables' => [
        'data' => [],
      ],
    ],
    'socialauthgoogle' => [
      'template' => 'block--socialauthgoogle',
      'variables' => [
        'destination_path' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_mail().
 *
 * Send mail to approved campus champions.
 */
function campuschampions_mail($key, &$message, $params) {
  $options = [
    'langcode' => $message['langcode'],
  ];
  switch ($key) {
    case 'approve_campuschampion':
      $message['from'] = 'leadership@campuschampions.org';
      $message['subject'] = 'Welcome to the Campus Champions Portal!';
      $message['body'][] = $params['message'];
      break;

    case 'join-cc':
      $message['from'] = 'leadership@campuschampions.org';
      $message['subject'] = $params['title'];
      ;
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Implements hook_mail_alter().
 *
 * Allow including html in system messages.
 */
function campuschampions_mail_alter(&$message) {
  switch ($message['key']) {
    // case 'page_mail':
    // case 'page_copy':
    // case 'cancel_confirm':
    case 'password_reset':
      // case 'register_admin_created':
      // case 'register_no_approval_required':
      // case 'register_pending_approval':
      // case 'register_pending_approval_admin':
      // case 'status_activated':
      // case 'status_blocked':
      // case 'status_canceled':
    case 'approve_campuschampion':
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
      foreach ($message['body'] as $key => &$body) {
        $body = new FormattableMarkup($body, []);
      }
      break;

  }
}

/**
 * Implements hook_node_access().
 *
 * Allow Affinity Group coordinators to edit the affinity group node.
 */
function campuschampions_node_access(NodeInterface $node, $op, $account) {
  $type = $node->bundle();

  if ($type != 'affinity_group' || $op != 'update') {
    return AccessResult::neutral();
  }

  $uids = array_column($node->field_coordinator->getValue(), 'target_id');

  return AccessResult::allowedIf(in_array($account->id(), $uids))->cachePerUser()->addCacheableDependency($node);
}

/**
 *
 */
function campuschampions_redirect_to_profile_page_form_submit($form, &$form_state) {
  $form_state->setRedirect('user.page');
}
