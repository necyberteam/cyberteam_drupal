<?php

use Drupal\user\UserInterface;
use Drupal\core\Site\Settings;

/**
 * Implements hook_user_login()
 * 
 * When user logs in, use the username to look for account info with an API call.
 * Update these account fields:
 * field_institution field_user_first_name field_user_last_name email 
 * 
 * If user not found, just quietly do nothing.
 */

class UserProfilesLogger
{

  private $enabled;
  private $prefix = "[User Profiles] ";
  function __construct($enable)
  {
    $this->enabled = $enable;
  }

  private function _log_it($msg, $is_error)
  {
    $msg = $this->prefix . $msg;
    if ($this->enabled) {
      error_log($msg);
      $is_error ? Drupal::messenger()->addError($msg) : Drupal::messenger()->addStatus($msg);
    }
  }

  function log($msg)
  {
    $this->_log_it($msg, false);
  }
  function log_error($msg)
  {
    $this->_log_it($msg, true);
  }
}

function userprofiles_user_login(UserInterface $account)
{
  $testing_enable_verbose_logging = TRUE;
  $testing_use_other_username = TRUE;

  $logger = new UserProfilesLogger($testing_enable_verbose_logging);

  $logger->log("-------------- into hook_user_login ---------------");

  $username = $account->get('name')->value;

  $logger->log("Into user_login hook.  User account email: " . print_r($account->getEmail(), true));

  if ($testing_use_other_username) {
    $username = 'karpenko';
    $logger->log("Using username $username for testing");
  }

  $account_json = get_account_data_from_api($logger, $username);

  if ($account_json === false) {
    // api call failed -- can't continue, and errors already reported
    return;
  }

  $logger->log("account_json = " . print_r($account_json, true));

  // set following fields based on API call response:
  //    field_institution field_user_first_name field_user_last_name email 

  // example response:
  // account_json = Array ( [username] => karpenko [firstName] => Barbara [middleName] => S. [lastName] => Minsker 
  //    [isSuspended] => [isArchived] => [organizationName] => University of Illinois at Urbana-Champaign 
  //    [organizationId] => 184 [nsfStatusCodeName] => Faculty [nsfStatusCodeId] => 3 [countryName] => United States 
  //    [countryId] => 210 [workPhone] => (217) 265-5293 [email] => minsker@uiuc.edu 
  //    [citizenships] => Array ( ) [profileVerificationDate] => )

  $account->set('field_institution', $account_json['organizationName']);
  $account->set('field_user_first_name', $account_json['firstName']);
  $account->set('field_user_last_name', $account_json['lastName']);

  if (!$testing_use_other_username)
    $account->setEmail($account_json['email']);

  // while testing, verify sets
  $logger->log('after set, field_user_first_name = [' . $account->get('field_user_first_name')->value . ']');
  $logger->log('after set, field_user_last_name = [' . $account->get('field_user_last_name')->value . ']');
  $logger->log('after set, field_institution = [' . $account->get('field_institution')->value . ']');
  $logger->log('after set, email = [' . $account->getEmail() . ']');

  //
  // leftover from example code -- leaving in case useful later
  //
  /* // If the user has a NULL time zone, notify them to set a time zone.
  if (!$account->getTimezone() && 
        $config->get('timezone.user.configurable') && 
        $config->get('timezone.user.warn')) {
    \Drupal::messenger()
      ->addStatus(t('Configure your <a href=":user-edit">account time zone setting</a>.', [
      ':user-edit' => $account
        ->toUrl('edit-form', [
        'query' => \Drupal::destination()
          ->getAsArray(),
        'fragment' => 'edit-timezone',
      ])
        ->toString(),
    ]));
  } */
}


/**
 * Pull account info from the api.  
 * 
 * @return json of account info (or FALSE if unable to get data)
 */
function get_account_data_from_api($logger, $username)
{

  $base_url = 'https://xras-identity-service-demo.xsede.org/profiles/v1/people';
  $request_url = $base_url . '/' . $username;

  // look for the ramps key in directory /var/www/cyberteam_drupal_dev/web/
  // in file sites/default/files/private/.keys/secrets.json
  $path = 'sites/default/files/private/.keys/secrets.json';
  if (!file_exists($path)) {
    Drupal::messenger()->addError("[User Profiles] Unable to get ramps api key");
    return false;
  }
  $secrets_json_text = file_get_contents($path);
  $secrets_data = json_decode($secrets_json_text, TRUE);
  $api_key = $secrets_data['ramps_api_key'];

  $curl = curl_init($request_url);

  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); // put response in return value
  curl_setopt($curl, CURLOPT_FAILONERROR, true); // include HTTP errors as failure
  curl_setopt($curl, CURLOPT_HTTPHEADER, [
    'XA-API-KEY: ' . $api_key,
    'XA-REQUESTER: MATCH',
    'Content-Type: application/json'
  ]);

  $response = curl_exec($curl);
  $curl_errno = curl_errno($curl);
  $curl_error = curl_error($curl);
  $responseCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
  curl_close($curl);

  $logger->log("response = " . print_r($response, true));
  $logger->log("curl_errno = $curl_errno");
  $logger->log("curl_error = $curl_error");
  $logger->log("responseCode = $responseCode");

  if ($responseCode >= 400) {
    Drupal::messenger()->addError("[User Profiles] Unable to get data for user [$username].  ($curl_error)");
    return false;
  }

  $json = json_decode($response, true);
  return $json;
}
