<?php

use Drupal\user\UserInterface;
use Drupal\core\Site\Settings;

/**
 * Implements hook_user_login()
 * 
 * Some notes from chats with Andrew:
 * 
 * We are guaranteed that the user who is successfully authenticated will have an ACCESS account 
 * in the database through the API. There could be an error (network, e.g) that prevents the API 
 * call from succeeding. I’m not sure what the proper behavior is then. For now, let’s just skip 
 * updating the user fields and continue with login, but I’ll put that on the list to discuss later.
 * field_is_cc is unrelated to the ACCESS user db API. It was just an example code from another 
 * module. Otherwise, that’s the process - get the field data from the API and update with account->set().
 * We need to add a field to the user, probably a boolean is_access which we should check to 
 * see if we need to do this API call. if is_access == false, we can skip it because the user 
 * is a member of one of the other communities but not ACCESS. Maybe we can do this together. 
 * It’s a pretty easy process to add a field. This module should check to see if that field 
 * exists on the user and if it does and it == true, then call the API.
 * 
 * If someone logs in successfully with the ACCESS IdP, we will set the is_access field to true. 
 * The other domains our website serves will use a different IdP and they may or may not be ACCESS 
 * members, so we want to be able to check if is_access is true when they log in. If a person 
 * has never logged in with the ACCESS IdP, the default state of is_access should be false.
 * 
 * We will be using the CIlogin auth module to do authentication. This will map the ACCESS 
 * username to the drupal username.  We need to add configuration to map fields returned in 
 * the payload to the user fields.
 * 
 * If this user is a member of the ACCESS community, $account->get('field_is_access') should be TRUE.
 * If so, call the api to get account info, and update these account fields:
 * field_institution field_user_first_name field_user_last_name email 
 * 
 */
function userprofiles_user_login(UserInterface $account)
{
  error_log("-------------- into hook_user_login ---------------");

  $testing_do_access_check = FALSE;
  $testing_use_other_username = TRUE;

  $messenger = Drupal::messenger();

  $username = $account->get('name')->value;
  $is_access = $account->get('field_is_access')->value;

  // TBD
  // we will eventually get an auth token from ACCESS_IDP.  And if someone logs in successfully 
  // with the ACCESS IdP, we will set the is_access field to true.

  $messenger->addStatus("[DEBUG] User account email: " . print_r($account->getEmail(), true));

  $messenger->addStatus("[DEBUG] User $username " . ($is_access ? "is" : "is not")
    . " an ACCESS member -- " . ($is_access ? "will" : "will not") . " update user fields."
    . ($testing_do_access_check  ? "" : "  (But skipping access check for testing.)"));


  if (!$is_access && $testing_do_access_check) {
    // user is not a member of ACCESS community -- can skip field updates
    return;
  }

  if ($testing_use_other_username) {
    $username = 'karpenko';
    $messenger->addStatus("[DEBUG] Using username $username for testing");
  }

  $account_json = get_account_data_from_api($username);

  if ($account_json === false) {
    // api call failed -- can't continue, and errors already reported
    return;
  }

  $messenger->addStatus("[DEBUG] account_json = " . print_r($account_json, true));

  // error_log('$response = ' . $response);
  // error_log('$account_json[organizationName] = ' . $account_json['organizationName']);


  // set following fields based on API call response:
  //    field_institution field_user_first_name field_user_last_name email 

  // example response:
  // account_json = Array ( [username] => karpenko [firstName] => Barbara [middleName] => S. [lastName] => Minsker 
  //    [isSuspended] => [isArchived] => [organizationName] => University of Illinois at Urbana-Champaign 
  //    [organizationId] => 184 [nsfStatusCodeName] => Faculty [nsfStatusCodeId] => 3 [countryName] => United States 
  //    [countryId] => 210 [workPhone] => (217) 265-5293 [email] => minsker@uiuc.edu 
  //    [citizenships] => Array ( ) [profileVerificationDate] => )

  $account->set('field_institution', $account_json['organizationName']);
  $account->set('field_user_first_name', $account_json['firstName']);
  $account->set('field_user_last_name', $account_json['lastName']);

  if (!$testing_use_other_username)
    $account->setEmail($account_json['email']);

  // while testing, verify sets
  $messenger->addStatus('[DEBUG] after set, field_user_first_name = [' . $account->get('field_user_first_name')->value . ']');
  $messenger->addStatus('[DEBUG] after set, field_user_last_name = [' . $account->get('field_user_last_name')->value . ']');
  $messenger->addStatus('[DEBUG] after set, field_institution = [' . $account->get('field_institution')->value . ']');
  $messenger->addStatus('[DEBUG] after set, email = [' . $account->getEmail() . ']');


  /* // If the user has a NULL time zone, notify them to set a time zone.
  if (!$account->getTimezone() && 
        $config->get('timezone.user.configurable') && 
        $config->get('timezone.user.warn')) {
    \Drupal::messenger()
      ->addStatus(t('Configure your <a href=":user-edit">account time zone setting</a>.', [
      ':user-edit' => $account
        ->toUrl('edit-form', [
        'query' => \Drupal::destination()
          ->getAsArray(),
        'fragment' => 'edit-timezone',
      ])
        ->toString(),
    ]));
  } */
}


/**
 * Pull account info from the api.  
 * @return json of account info (or FALSE if unable)
 */
function get_account_data_from_api($username) {

  $base_url = 'https://xras-identity-service-demo.xsede.org/profiles/v1/people';
  $request_url = $base_url . '/' . $username;

  // storing ramps api key in local.settings.php, which is not in git
  $api_key = Settings::get('ramps_api_key');

  $curl = curl_init($request_url);

  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); // put response in return value
  curl_setopt($curl, CURLOPT_FAILONERROR, true); // include HTTP errors as failure
  curl_setopt($curl, CURLOPT_HTTPHEADER, [
    'XA-API-KEY: ' . $api_key,
    'XA-REQUESTER: MATCH',
    'Content-Type: application/json'
  ]);

  $response = curl_exec($curl);
  $curl_errno = curl_errno($curl);
  $curl_error = curl_error($curl);
  $responseCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
  curl_close($curl);

  $messenger = Drupal::messenger();


  $messenger->addStatus("[DEBUG] response = " . print_r($response, true));
  $messenger->addStatus("[DEBUG] curl_errno = $curl_errno");
  $messenger->addStatus("[DEBUG] curl_error = $curl_error");
  $messenger->addStatus("[DEBUG] responseCode = $responseCode");

  if ($responseCode >= 400) {
    $messenger->addError("Unable to get data for user [$username].  ($curl_error)");
    return false;
  }

  $json = json_decode($response, true);
  return $json;
}
